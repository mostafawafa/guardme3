/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 36);
/******/ })
/************************************************************************/
/******/ ({

/***/ 36:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(9);


/***/ }),

/***/ 9:
/***/ (function(module, exports) {

new window.Vue({
    el: '#phoneVue',

    data: function data() {
        return {
            user: {},
            phone: null,
            code: null,
            action: 'new'
        };
    },

    /*
        watch: {
            action: (value) => {
                $('#confirmation-code').collapse(value === 'confirm' ? 'show' : 'hide')
            }
        },
    */
    methods: {
        getUser: function getUser() {
            var _this = this;

            axios.get(verificationConfig.url + '/api/user').then(function (response) {
                _this.user = response.data;

                if (_this.user.phone) {
                    _this.phone = _this.user.phone;
                    _this.action = _this.user.phone_verified ? 'unbind' : 'new';
                }
            });
        },
        send: function send() {
            var _this2 = this;

            var code = this.code;
            var phone = this.phone;
            var url = verificationConfig.url + '/api/verify/' + (this.action === 'confirm' ? 'confirm' : 'otp');
            axios.post(url, { code: code, phone: phone }).then(function (response) {
                if (!response.data.hasOwnProperty('error')) {
                    _this2.callback();
                } else {
                    alert(response.data.error);
                }
            });
        },
        change: function change() {
            this.action = 'new';
        },
        callback: function callback() {
            switch (true) {
                case this.action === 'new':
                    this.action = 'confirm';
                    break;

                case this.action === 'unbind':
                    this.action = 'confirm';
                    break;

                case this.action === 'confirm':
                    this.code = '';

                    if (this.user.phone_verified) {
                        this.phone = '';
                        this.action = 'new';
                        alert('Now you can bind another phone.');
                    } else {
                        this.action = 'unbind';
                        alert('Phone number ' + this.phone + ' successfully confirmed!');
                    }

                    this.getUser();

                    break;
            }
        }
    },

    mounted: function mounted() {
        this.getUser();
    }
});

/***/ })

/******/ });